// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// FastCirSil
double FastCirSil(NumericVector x, NumericVector y, NumericVector b, const double c);
RcppExport SEXP _CircularSilhouette_FastCirSil(SEXP xSEXP, SEXP ySEXP, SEXP bSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< const double >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(FastCirSil(x, y, b, c));
    return rcpp_result_gen;
END_RCPP
}
// linearsil
double linearsil(const NumericVector& points, const IntegerVector& cluster);
RcppExport SEXP _CircularSilhouette_linearsil(SEXP pointsSEXP, SEXP clusterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type cluster(clusterSEXP);
    rcpp_result_gen = Rcpp::wrap(linearsil(points, cluster));
    return rcpp_result_gen;
END_RCPP
}
// slowsil
/*  * x is integer vector of clusters  * y is double vector points  * b is double vector of cluster sizes  * c is double representing circumference  * returns averaged silhouette score for given cluster assignment  */ double slowsil(NumericVector x, NumericVector y, NumericVector b, const double c);
RcppExport SEXP _CircularSilhouette_slowsil(SEXP xSEXP, SEXP ySEXP, SEXP bSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< const double >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(slowsil(x, y, b, c));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CircularSilhouette_FastCirSil", (DL_FUNC) &_CircularSilhouette_FastCirSil, 4},
    {"_CircularSilhouette_linearsil", (DL_FUNC) &_CircularSilhouette_linearsil, 2},
    {"_CircularSilhouette_slowsil", (DL_FUNC) &_CircularSilhouette_slowsil, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_CircularSilhouette(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
